{"version":3,"sources":["assets/logo.svg","app/services/todos.ts","features/auth/authSlice.ts","features/todos/todosLocalSlice.ts","app/store.ts","features/auth/LoggedInView.tsx","features/auth/LoginView.tsx","features/auth/Auth.tsx","features/header/Header.tsx","features/todos/TodoForm.tsx","features/todos/TodoListItem.tsx","features/todos/TodoList.tsx","features/todos/TodosManager.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["baseUrl","baseQuery","fetchBaseQuery","baseQueryWithRetry","retry","maxRetries","__TAG__","__API_PATH__","__API_LOGIN_PATH__","todoApi","createApi","reducerPath","tagTypes","endpoints","build","login","mutation","query","credentials","url","method","body","getTodos","providesTags","result","map","type","id","addTodo","invalidatesTags","getTodo","error","updateTodo","data","arg","deleteTodo","useAddTodoMutation","useDeleteTodoMutation","useGetTodosQuery","useGetTodoQuery","useUpdateTodoMutation","useLoginMutation","createAsyncThunk","a","fetch","res","ok","Error","headers","get","toLowerCase","includes","json","logout","slice","createSlice","name","initialState","user","isAuthenticated","isLoading","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","selectIsAuthenticated","auth","selectIsLogginIn","selectUser","saveLocalStorage","todos","key","localStorage","setItem","JSON","stringify","loadLocalStorage","parse","getItem","err","console","log","addLocalTodo","todo","item","nanoid","isLocal","push","checkLocalTodo","idx","findIndex","t","done","deleteLocalTodo","filter","selectTodos","rtkQueryErrorLogger","api","next","isRejectedWithValue","warn","msg","message","notify","store","options","configureStore","reducer","middleware","getDefaultMiddleware","concat","createStore","useAppDispatch","useDispatch","useTypedSelector","useSelector","title","timeout","onScreen","pauseOnHover","notificationsStore","addNotification","insert","container","dismiss","duration","LoggedInView","onLogout","className","email","src","avatar","alt","onClick","LoginView","disabled","Auth","isLogginIn","dispatch","useState","showPopup","setShowPopup","useEffect","opts","features","toolbar","menubar","width","height","copyStyles","onUnload","window","location","assign","Header","nd","date","Date","day","format","dayDisplay","month","monthDisplay","year","weekday","style","display","alignItems","fontSize","margin","Navbar","logo","TodoForm","initialValue","text","setTodo","onSubmit","e","preventDefault","then","placeholder","value","onChange","target","prev","required","TodoListItem","onDone","onDelete","isDeleting","isUpdating","classes","join","TodoList","undefined","skip","todosRemote","isError","todosLocal","deletedId","originalArgs","updatedId","checkTodo","unwrap","catch","removeTodo","doneTodos","undoneTodos","color","length","textAlign","renderTodoItem","marginTop","TodosManager","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b7da59e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.ca90817f.svg\";","import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react';\nimport { User } from '../../features/auth/authSlice';\n// import { RootState } from '../store';\n\nexport interface Todo {\n  id: string;\n  done: boolean;\n  text: string;\n  isLocal: boolean | void;\n}\n\nconst baseUrl = '/api/';\n\n// Create our baseQuery instance\nconst baseQuery = fetchBaseQuery({\n  baseUrl,\n  // prepareHeaders: (headers, { getState }) => {\n  //   // By default, if we have a token in the store, let's use that for authenticated requests\n  //   const token = (getState() as RootState).auth.token;\n  //   if (token) {\n  //     headers.set('authentication', `Bearer ${token}`);\n  //   }\n  //   return headers;\n  // },\n});\n\nconst baseQueryWithRetry = retry(baseQuery, { maxRetries: 3 });\n\nconst __TAG__ = 'Todo';\nconst __API_PATH__ = 'todos';\nexport const __API_LOGIN_PATH__ = baseUrl + 'auth/google';\n\nexport const todoApi = createApi({\n  reducerPath: 'todosApi', // We only specify this because there are many services. This would not be common in most applications\n  baseQuery: baseQueryWithRetry,\n  tagTypes: [__TAG__],\n  endpoints: (build) => ({\n    login: build.mutation<{ token: string; user: User }, any>({\n      query: (credentials: any) => ({\n        url: 'login',\n        method: 'POST',\n        body: credentials,\n      }),\n    }),\n    getTodos: build.query<Todo[], void>({\n      query: () => ({ url: __API_PATH__ }),\n      providesTags: (result) =>\n        result\n          ? [\n              ...result.map(({ id }) => ({ type: 'Todo' as const, id })),\n              { type: __TAG__, id: 'LIST' },\n            ]\n          : [{ type: __TAG__, id: 'LIST' }],\n    }),\n    addTodo: build.mutation<Todo, Omit<Todo, 'id'>>({\n      query: (body) => ({\n        url: __API_PATH__,\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: [{ type: __TAG__, id: 'LIST' }],\n    }),\n    getTodo: build.query<Todo, string>({\n      query: (id) => `${__API_PATH__}/${id}`,\n      providesTags: (result, error, id) => [{ type: __TAG__, id }],\n    }),\n    updateTodo: build.mutation<Todo, Partial<Todo>>({\n      query(data) {\n        const { id, ...body } = data;\n        return {\n          url: `${__API_PATH__}/${id}`,\n          method: 'PUT',\n          body,\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{ type: __TAG__, id: arg.id }],\n    }),\n    deleteTodo: build.mutation<{ success: boolean; id: string }, string>({\n      query(id) {\n        return {\n          url: `${__API_PATH__}/${id}`,\n          method: 'DELETE',\n        };\n      },\n      invalidatesTags: (result, error, id) => [{ type: __TAG__, id }],\n    }),\n  }),\n});\n\nexport const {\n  useAddTodoMutation,\n  useDeleteTodoMutation,\n  useGetTodoQuery,\n  useGetTodosQuery,\n  useLoginMutation,\n  useUpdateTodoMutation,\n} = todoApi;\n\nexport const {\n  endpoints: { login },\n} = todoApi;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface User {\n  name: string;\n  email: string;\n  avatar: string;\n}\n\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n} as { user: null | User; isAuthenticated: boolean; isLoading: boolean };\n\nexport const login = createAsyncThunk<User>('user/login', async () => {\n  const res = await fetch('/api/auth/me');\n\n  if (!res.ok) {\n    throw new Error('Not logged in');\n  }\n\n  if (\n    res.headers.get('Content-Type')?.toLowerCase().includes('application/json')\n  ) {\n    return await res.json();\n  } else {\n    throw new Error('Not logged in');\n  }\n});\n\nexport const logout = createAsyncThunk('user/logout', async () => {\n  await fetch('/api/auth/logout');\n  return null;\n});\n\nconst slice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        state.user = action.payload;\n        state.isAuthenticated = true;\n        state.isLoading = false;\n      })\n      .addCase(login.rejected, (state) => {\n        state.isLoading = false;\n      })\n      .addCase(logout.fulfilled, (state) => {\n        state.user = null;\n        state.isAuthenticated = false;\n      });\n  },\n});\n\nexport default slice.reducer;\n\nexport const selectIsAuthenticated: (state: RootState) => boolean = (state) =>\n  state.auth.isAuthenticated;\n\nexport const selectIsLogginIn: (state: RootState) => boolean = (state) =>\n  state.auth.isLoading;\n\nexport const selectUser: (state: RootState) => User | null = (state) =>\n  state.auth.user;\n","import { createAsyncThunk, createSlice, nanoid } from '@reduxjs/toolkit';\nimport { Todo } from '../../app/services/todos';\nimport { RootState } from '../../app/store';\n\nconst saveLocalStorage = (todos: Todo[], key = 'todosLocal'): void => {\n  if (localStorage) localStorage.setItem(key, JSON.stringify(todos));\n};\n\nconst loadLocalStorage = (key = 'todosLocal'): Todo[] => {\n  try {\n    const todos = JSON.parse(localStorage.getItem(key) || '');\n    return todos;\n  } catch (err) {\n    console.log(err);\n    saveLocalStorage([]);\n    return [];\n  }\n};\n\nconst initialState = loadLocalStorage();\n\nexport const addLocalTodo = createAsyncThunk(\n  'todosLocal/add',\n  async (todo: Omit<Todo, 'id'>) => {\n    let item: Todo = { ...todo, id: nanoid(), isLocal: true };\n    const todos = loadLocalStorage();\n    todos.push(item);\n    saveLocalStorage(todos);\n\n    return item;\n  }\n);\n\nexport const checkLocalTodo = createAsyncThunk(\n  'todosLocal/check',\n  async (todo: Pick<Todo, 'id'>) => {\n    const todos = loadLocalStorage();\n    const idx = todos.findIndex((t) => t.id === todo.id);\n    todos[idx].done = true;\n    saveLocalStorage(todos);\n\n    return todo;\n  }\n);\n\nexport const deleteLocalTodo = createAsyncThunk(\n  'todosLocal/delete',\n  async (todo: Pick<Todo, 'id'>) => {\n    const todos = loadLocalStorage();\n    saveLocalStorage(todos.filter((t) => t.id !== todo.id));\n\n    return todo;\n  }\n);\n\nconst slice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(addLocalTodo.fulfilled, (state, action) => {\n        state.push(action.payload);\n      })\n      .addCase(checkLocalTodo.fulfilled, (state, action) => {\n        const idx = state.findIndex((t) => t.id === action.payload.id);\n        state[idx].done = true;\n      })\n      .addCase(deleteLocalTodo.fulfilled, (state, action) =>\n        state.filter((t) => t.id !== action.payload.id)\n      );\n  },\n});\n\nexport default slice.reducer;\n\nexport const selectTodos = (state: RootState) => state.todos;\n","import {\n  configureStore,\n  ConfigureStoreOptions,\n  nanoid,\n} from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { todoApi } from './services/todos';\nimport auth from '../features/auth/authSlice';\nimport todos from '../features/todos/todosLocalSlice';\nimport {\n  MiddlewareAPI,\n  isRejectedWithValue,\n  Middleware,\n} from '@reduxjs/toolkit';\nimport { store as notificationsStore } from 'react-notifications-component';\n\n/**\n * Log a warning and show a toast!\n */\nconst rtkQueryErrorLogger: Middleware =\n  (api: MiddlewareAPI) => (next) => (action) => {\n    // RTK Query uses `createAsyncThunk` from redux-toolkit under the hood, so we're able to utilize these use matchers!\n    if (isRejectedWithValue(action)) {\n      console.warn('We got a rejected action!', action);\n      let msg =\n        action.payload?.data?.message ??\n        action.payload?.error ??\n        action.error?.message ??\n        'An error occured.';\n\n      notify(msg, 'danger', 'Error', 3000, true, true);\n    }\n\n    return next(action);\n  };\n\nexport const createStore = (\n  options?: ConfigureStoreOptions['preloadedState'] | undefined\n) =>\n  configureStore({\n    reducer: {\n      [todoApi.reducerPath]: todoApi.reducer,\n      auth,\n      todos,\n    },\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(todoApi.middleware, rtkQueryErrorLogger),\n    ...options,\n  });\n\nexport const store = createStore();\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport type RootState = ReturnType<typeof store.getState>;\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport const notify = (\n  message: string,\n  type:\n    | 'success'\n    | 'danger'\n    | 'info'\n    | 'default'\n    | 'warning'\n    | undefined = 'success',\n  title: string = 'Success',\n  timeout: number = 1500,\n  onScreen: boolean = false,\n  pauseOnHover: boolean = false\n) => {\n  notificationsStore.addNotification({\n    id: nanoid(),\n    title,\n    message,\n    type,\n    insert: 'bottom',\n    container: 'bottom-right',\n    dismiss: {\n      duration: timeout,\n      onScreen,\n      pauseOnHover,\n    },\n  });\n};\n","import { User } from './authSlice';\n\nexport const LoggedInView: React.FC<{ user: User; onLogout: () => void }> = ({\n  user,\n  onLogout,\n}) => (\n  <div className=\"logged-in-view\" title={user.email}>\n    <div className=\"user-avatar\">\n      <img src={user.avatar} alt={user.name} />\n    </div>\n    <button className=\"btn-google btn-logout2\" onClick={onLogout}>\n      Logout as {user.name}\n    </button>\n  </div>\n);\n","export const LoginView: React.FC<{ onClick: () => void; disabled: boolean }> =\n  ({ onClick, disabled }) => (\n    <button onClick={onClick} className=\"btn-google\" disabled={disabled}>\n      Sign in with Google\n    </button>\n  );\n","import { useState, useEffect } from 'react';\nimport NewWindow from 'react-new-window';\nimport { __API_LOGIN_PATH__ } from '../../app/services/todos';\nimport { useAppDispatch, useTypedSelector } from '../../app/store';\nimport './Auth.css';\nimport { login, logout, selectIsLogginIn, selectUser, User } from './authSlice';\nimport { LoggedInView } from './LoggedInView';\nimport { LoginView } from './LoginView';\n\nexport const Auth = () => {\n  const usePopup = false;\n  const user = useTypedSelector<User | null>(selectUser);\n  const isLogginIn = useTypedSelector(selectIsLogginIn);\n  const dispatch = useAppDispatch();\n  const [showPopup, setShowPopup] = useState(false);\n\n  const handleSignin = () => {\n    if (usePopup) {\n      setShowPopup(true);\n    } else {\n      window.location.assign(__API_LOGIN_PATH__);\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  useEffect(() => {\n    if (!user) {\n      dispatch(login());\n    }\n  }, [user, dispatch]);\n\n  const opts = {\n    features: {\n      toolbar: false,\n      menubar: false,\n      width: 500,\n      height: 700,\n    },\n    url: __API_LOGIN_PATH__,\n    name: 'Sign in with Google',\n    copyStyles: false,\n    onUnload: () => {\n      setShowPopup(false);\n      dispatch(login());\n    },\n  };\n\n  if (!user) {\n    return (\n      <>\n        <LoginView onClick={handleSignin} disabled={isLogginIn} />\n        {showPopup && <NewWindow {...opts} />}\n      </>\n    );\n  }\n\n  return <LoggedInView onLogout={handleLogout} user={user} />;\n};\n\n// const handleSignIn = () => {\n//   const strWindowFeatures =\n//     'toolbar=no, menubar=no, width=600, height=700, top=100, left=500';\n//   const { current: ref } = windowObjectReference;\n//   if (ref === null || ref.closed) {\n//     /* if the pointer to the window object in memory does not exist\n//        or if such pointer exists but the window was closed */\n//     const wnd = window.open(\n//       __API_LOGIN_PATH__,\n//       'Sign in with Google',\n//       strWindowFeatures\n//     );\n\n//     wnd?.addEventListener('beforeunload', (e) => {\n//       console.log('closed', e);\n//       dispatch(login());\n//     });\n\n//     windowObjectReference.current = wnd;\n//   } else {\n//     /* else the window reference must exist and the window\n//        is not closed; therefore, we can bring it back on top of any other\n//        window with the focus() method. There would be no need to re-create\n//        the window or to reload the referenced resource. */\n//     ref.focus();\n//   }\n// };\n","import { format } from 'date-fns';\nimport ReactNotification from 'react-notifications-component';\nimport logo from '../../assets/logo.svg';\nimport 'react-notifications-component/dist/theme.css';\nimport './Header.css';\nimport { useTypedSelector } from '../../app/store';\nimport { selectIsAuthenticated, selectIsLogginIn } from '../auth/authSlice';\nimport { Auth } from '../auth/Auth';\n\nconst parse = (nd: Date) => {\n  return {\n    date: nd,\n    day: format(nd, 'dd'),\n    dayDisplay: format(nd, 'd'),\n    month: format(nd, 'MM'),\n    monthDisplay: format(nd, 'MMM'),\n    year: format(nd, 'y'),\n    weekday: format(nd, 'EEEE'),\n  };\n};\n\nexport function Header() {\n  const date = parse(new Date());\n  const isAuthenticated = useTypedSelector(selectIsAuthenticated);\n  const isLogginIn = useTypedSelector(selectIsLogginIn);\n\n  return (\n    <header>\n      <ReactNotification />\n      <Navbar />\n      <div className=\"header-container\">\n        <div\n          style={{ display: 'flex', alignItems: 'center', fontSize: '1.5rem' }}\n        >\n          <div style={{ margin: '0 10px', fontSize: '5rem' }}>\n            {date.dayDisplay}\n          </div>\n          <div>\n            <div>{date.monthDisplay}</div>\n            <div>{date.year}</div>\n          </div>\n        </div>\n        <div>\n          {!isLogginIn && !isAuthenticated && (\n            <p style={{ fontSize: '1rem' }}>\n              Your todos are saved in the browser only!\n              <br /> Sign in to save in the database\n            </p>\n          )}\n        </div>\n        <div style={{ fontSize: '2rem' }}>{date.weekday}</div>\n      </div>\n    </header>\n  );\n}\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar\">\n      <div className=\"logo\">\n        <h2>Awesome Todos</h2>\n        <img src={logo} alt=\"Awesome Todos\" title=\"Awesome Todos\" />\n      </div>\n      <div>\n        <Auth />\n      </div>\n    </nav>\n  );\n};\n","import { useState } from 'react';\nimport { Todo, useAddTodoMutation } from '../../app/services/todos';\nimport { useAppDispatch, useTypedSelector } from '../../app/store';\nimport { selectIsAuthenticated } from '../auth/authSlice';\nimport { addLocalTodo } from './todosLocalSlice';\n\nexport const TodoForm: React.FC<any> = () => {\n  const isAuthenticated = useTypedSelector(selectIsAuthenticated);\n\n  const initialValue = { text: '', done: false, isLocal: !isAuthenticated };\n  const [todo, setTodo] = useState<Omit<Todo, 'id'>>(initialValue);\n  const [addTodo, { isLoading }] = useAddTodoMutation();\n\n  const dispatch = useAppDispatch();\n\n  const handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    setTodo((prev) => ({\n      ...prev,\n      [target.name]: target.value,\n      isLocal: !isAuthenticated,\n    }));\n  };\n\n  const handleAddTodo = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!isAuthenticated) {\n      dispatch(addLocalTodo(todo)).then(() => setTodo(initialValue));\n    } else {\n      addTodo(todo).then(() => setTodo(initialValue));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <form onSubmit={handleAddTodo} className=\"todo-form\">\n        <input\n          type=\"text\"\n          name=\"text\"\n          placeholder=\"What do you want to do next?\"\n          value={todo.text}\n          onChange={handleChange}\n          required\n        />\n\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Adding...' : 'Add Todo'}\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { Todo } from '../../app/services/todos';\n\nexport const TodoListItem = ({\n  data: { text, id, done, isLocal },\n  onDone,\n  onDelete,\n  isDeleting,\n  isUpdating,\n}: {\n  data: Todo;\n  onDone: (id: string, done: boolean, isLocal: boolean | void) => void;\n  onDelete: (id: string, isLocal: boolean | void) => void;\n  isDeleting: boolean;\n  isUpdating?: boolean;\n}) => {\n  const classes = ['todo-item'];\n  done && classes.push('checked');\n  (isUpdating || isDeleting) && classes.push('pending');\n\n  return (\n    <li className={classes.join(' ')}>\n      <div className=\"todo-content\">\n        <div className=\"todo-text\">{text}</div>\n        <div className=\"todo-tags\">\n          {isLocal ? <div className=\"todo-local\">local</div> : <></>}\n        </div>\n      </div>\n      <div className=\"todo-buttons\">\n        <button\n          onClick={() => onDelete(id, isLocal)}\n          title=\"Delete\"\n          disabled={isDeleting}\n        >\n          {isDeleting ? '◽◽' : '❌'}\n        </button>\n        {!done && (\n          <button\n            onClick={() => onDone(id, !done, isLocal)}\n            title={done ? 'Mark undone' : 'Mark done'}\n            disabled={isUpdating}\n          >\n            {isUpdating ? '◽◽' : '✔️'}\n          </button>\n        )}\n      </div>\n    </li>\n  );\n};\n","import {\n  useGetTodosQuery,\n  useDeleteTodoMutation,\n  useUpdateTodoMutation,\n  Todo,\n} from '../../app/services/todos';\nimport { TodoListItem } from './TodoListItem';\nimport CircleLoader from 'react-spinners/CircleLoader';\nimport { notify, useAppDispatch, useTypedSelector } from '../../app/store';\nimport {\n  checkLocalTodo,\n  deleteLocalTodo,\n  selectTodos,\n} from './todosLocalSlice';\nimport { selectIsAuthenticated } from '../auth/authSlice';\n\nexport const TodoList = () => {\n  const isAuthenticated = useTypedSelector(selectIsAuthenticated);\n  const dispatch = useAppDispatch();\n  const {\n    data: todosRemote,\n    isLoading,\n    isError,\n  } = useGetTodosQuery(undefined, { skip: !isAuthenticated });\n\n  const todosLocal = useTypedSelector(selectTodos);\n\n  const [deleteTodo, { isLoading: isDeleting, originalArgs: deletedId }] =\n    useDeleteTodoMutation();\n  const [updateTodo, { isLoading: isUpdating, originalArgs: updatedId }] =\n    useUpdateTodoMutation();\n\n  const checkTodo = (id: string, done: boolean, isLocal: boolean | void) => {\n    const onDone = () => {\n      notify('Todo updated', 'info');\n    };\n\n    if (!isAuthenticated || isLocal) {\n      dispatch(checkLocalTodo({ id }))\n        .unwrap()\n        .then(onDone)\n        .catch((e) => console.log('Local update error', e));\n    } else {\n      updateTodo({ id, done })\n        .unwrap()\n        .then(onDone)\n        .catch((e) => console.log('Remote update error', e));\n    }\n  };\n\n  const removeTodo = (id: string, isLocal: boolean | void) => {\n    const onDone = () => {\n      notify('Todo Deleted');\n    };\n\n    if (!isAuthenticated || isLocal) {\n      dispatch(deleteLocalTodo({ id }))\n        .unwrap()\n        .then(onDone)\n        .catch((e) => console.log('Local delete error', e));\n    } else {\n      deleteTodo(id)\n        .unwrap()\n        .then(onDone)\n        .catch((e) => console.log('Remote delete error', e));\n    }\n  };\n\n  let todos: Todo[];\n  if (isAuthenticated) {\n    todos = (todosRemote ?? []).concat(...todosLocal);\n  } else {\n    todos = todosLocal;\n  }\n\n  const doneTodos = todos.filter((t) => t.done);\n  const undoneTodos = todos.filter((t) => !t.done);\n\n  if (isLoading && !isError) {\n    return (\n      <div className=\"todos-loader\">\n        <CircleLoader color={'#3178c6'} />\n      </div>\n    );\n  }\n\n  if (todos.length === 0) {\n    return (\n      <div style={{ textAlign: 'center' }}>No todos! Start by adding some</div>\n    );\n  }\n\n  const renderTodoItem = (todo: Todo) => (\n    <TodoListItem\n      key={todo.id}\n      data={todo}\n      onDelete={removeTodo}\n      onDone={checkTodo}\n      isDeleting={isDeleting && deletedId === todo.id}\n      isUpdating={isUpdating && updatedId?.id === todo.id}\n    />\n  );\n\n  return (\n    <div>\n      {!isAuthenticated && <h2>Local todos</h2>}\n      <ul className=\"todo-list\">{undoneTodos.map(renderTodoItem)}</ul>\n      {doneTodos.length > 0 && (\n        <div style={{ marginTop: '1rem' }}>\n          <h2>Completed</h2>\n          <ul className=\"todo-list\">{doneTodos.map(renderTodoItem)}</ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useTypedSelector } from '../../app/store';\nimport { selectIsLogginIn } from '../auth/authSlice';\nimport { TodoForm } from './TodoForm';\nimport { TodoList } from './TodoList';\nimport './TodosManager.css';\n\nexport const TodosManager = () => {\n  const isLogginIn = useTypedSelector(selectIsLogginIn);\n  return (\n    <main>\n      {/* Form */}\n      <TodoForm />\n      {/* List or no todos view */}\n      <div className=\"todo-list-wrapper\">\n        {isLogginIn && <p>Loading</p>}\n        {!isLogginIn && <TodoList />}\n      </div>\n    </main>\n  );\n};\n\nexport default TodosManager;\n","import { Header } from './features/header/Header';\nimport TodosManager from './features/todos/TodosManager';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <TodosManager />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}